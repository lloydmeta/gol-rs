# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    - CRATE_NAME=gol

matrix:
  include:
    # Linux
    - env: TARGET=i686-unknown-linux-gnu
    - env: TARGET=i686-unknown-linux-musl
    - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-musl

    # OSX
    # - env: TARGET=i686-apple-darwin
    #   os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # *BSD
    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    # - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Other architectures
    - env: TARGET=aarch64-unknown-linux-gnu
    - env: TARGET=armv7-unknown-linux-gnueabihf
    - env: TARGET=mips-unknown-linux-gnu
    - env: TARGET=mips64-unknown-linux-gnuabi64
    - env: TARGET=mips64el-unknown-linux-gnuabi64
    - env: TARGET=mipsel-unknown-linux-gnu
    - env: TARGET=powerpc-unknown-linux-gnu
    - env: TARGET=powerpc64-unknown-linux-gnu
    - env: TARGET=powerpc64le-unknown-linux-gnu
    - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1

    # Testing other channels
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly

before_install: set -e

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  api_key:
    secure: "p4PVyk9TU9o0X9BQiMwFu7Z2KthANnNhQ690NXm7tei7rXizsHt+QBOuVsdaRmZokj1idEedArex9/+3Jw1uckv4gknz5TWDQ1dPV7p0jngzpda/o6I13dKTdd4l1FokNwuNk8WUo1wyIqj13HP2T0VNPV+e69dwK6rqbduf
XuLG4uBp54ZAg+95c4IxR1hTyDyeFcQahGFboiYBr2MdElUVfoAmWdII4S1fFl4IqILH9HLNdw2RUbzauQm1d1MIzQIjBWPIKtYGfsYFLX6edkq2Xiwt1kqAKHsVC8AN1dXX/QKjNc1r7ExjYVosVsWasyYQKqXLRGDg4ADiBNJVFiq5Obu
Xf7Kst6/UWcFQXXt/Z8EcUK3CvX0NEz/CeuhZKD745Er3u0UefARLtQlTjPltg5GKyRN3uDoJY0oPqVX81M87sO9G5lUUDjrwaU47PceiqK8mr4cqVlXys2rlR/OCq94I2jMoLaT50wLXRVHfxYnBpNl/ztNIAL+PsaJ87HX8IgSRr7+Lda
dK1BFV08hIv651dFiK/3ZM3Hu+E9yJiycAFsJeizP6uBfGpNauUZ90qa5DAaDwThnWm7F2Bg5lvYnM2W6hd+IhToVfmhNUT0JYxOsez4PHuMyWdwCHqwKKhzT1eUFeBERExZi1Am6dZP24Cum7UIyaX+5wg/w="
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never